/*

   mTCP Global.H
   Copyright (C) 2010-2023 Michael B. Brutman (mbbrutman@gmail.com)
   mTCP web page: http://www.brutman.com/mTCP


   This file is part of mTCP.

   mTCP is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   mTCP is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with mTCP.  If not, see <http://www.gnu.org/licenses/>.


   Description: Some global #defines for setting behavior across all
     of the applications.

   In the beginning every application set all of their configuration options
   in a local configuration file, and this file was used for basically just
   turning trace on or off globally.  Patterns of settings emerged; the UDP
   application generally had fewer buffers, the server applications did not
   include UDP or DNS but used many buffers, and the client TCP applications
   needed everything.

   The set of options chosen here is a reasonable set for most applications.
   Specific applications will probably want to change the number of packet
   buffers, TCP sockets and TCP transmit buffers as needed.  But the rest of
   the settings are probably sane.


   Changes:

   2011-05-27: Initial release as open source software
   2014-05-25: Restructure to include more seldom changed configuration
               options here, and only override if needed in individual
               applications.
   2015-01-10: Add PACKET_HANDLERS define

*/


#ifndef GLOBAL_CFG_H
#define GLOBAL_CFG_H


// Packet Layer defines
//
#define PACKET_HANDLERS      (2)   // Number of etherType handlers
#define PACKET_BUFFERS      (10)   // Number of incoming buffers
#define PACKET_BUFFER_LEN (1514)   // Size of each incoming buffer
#define PKT_DUMP_BYTES    (1514)   // Maximum number of bytes for packet dumps


// ARP configuration defines
//
#define ARP_MAX_ENTRIES      (5)   // Size of ARP cache
#define ARP_MAX_PENDING      (2)   // Max number of pending requests
#define ARP_RETRIES          (3)   // Number of retries to attempt
#define ARP_TIMEOUT      (500ul)   // MS between retries
#define ARP_TIMEOUT_FAST (200ul)   // MS between retries; fast fail version


// IP Defines
//
#define IP_MAX_FRAG_PACKETS              (4)  // # to reassemble concurrently
#define IP_MAX_FRAGS_PER_PACKET         (10)  // Max number of frags per pkt
#define IP_BIGPACKET_SIZE             (2048)  // Maximum IP payload size
#define IP_FRAG_REASSEMBLY_TIMEOUT  (4000ul)  // MS before giving up


// ICMP Defines
//
#define ICMP_ECHO_OPT_DATA       (256)   // How big can the payload be?


// TCP configuration defines
//
#define TCP_MAX_SOCKETS            (1)   // Maximum number of sockets to use
#define TCP_MAX_XMIT_BUFS         (10)   // Number of x-mit buffers to create
#define TCP_SOCKET_RING_SIZE       (4)   // Size of queues in each socket
#define TCP_CLOSE_TIMEOUT    (15000ul)   // MS before forcing a socket closed
#define TCP_OPT_ENQUEUED_ACKS            // Seems like we should always use this

// Add this to your local application CFG file if you need listen support
// #define TCP_LISTEN_CODE               // Including listen support


// UDP configuration defines
//
#define UDP_MAX_CALLBACKS          (1)


// DNS
//
#define DNS_MAX_NAME_LEN             (128)   // Seems reasonable
#define DNS_MAX_DOMAIN_LEN            (50)   // Max length for a domain name
#define DNS_MAX_ENTRIES                (1)   // 7 bits only (max 127)
#define DNS_HANDLER_PORT            (1057)   // Choose something stable to avoid conflicts.
#define DNS_RECURSION_DESIRED          (1)   // Yes - let the server do the work
#define DNS_INITIAL_SEND_TIMEOUT   (500ul)   // ARP timeout for first try
#define DNS_RETRY_THRESHOLD       (2000ul)   // Retry a request after 2000 ms
#define DNS_TIMEOUT              (10000ul)   // 10000 ms



// DHCP behavior
//
// Give a lease expiring warning if the DHCP lease expires within
// this many seconds.
//
#define DHCP_LEASE_THRESHOLD      (3600ul)


//-----------------------------------------------------------------------------
//
// Major functions


// Enable SLEEP calls during the idle loops of all of the applications
//
#define SLEEP_CALLS



// Tracing is on by default.  If you want it disabled then define NOTRACE
//
// #define NOTRACE



// TORTURE_TEST_PACKET_LOSS is a testing option that will drop packets at a
// frequency you specify.  The frequency is the inverse of the number
// specified here, so for example if you specify 50 you get a 2 percent
// simulated packet loss rate.
//
// #define TORTURE_TEST_PACKET_LOSS 50


#endif
